{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/ParticleSystem.ts"],"names":["root","factory","exports","module","define","amd","a","i","this","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","randRange","range","Math","abs","random","ParticleSystem","texture","textureInfo","config","ctx","canvasInfo","particleList","pool","frameTime","$stopping","$stopped","canvasWidth","width","canvasHeight","height","changeTexture","changeConfig","createParticlePool","gravityX","gravity","x","gravityY","y","emitterX","emitterXVariance","emitterYVariance","emitterY","lifespan","maxParticles","speed","angle","angleVariance","endRotation","endRotationVariance","startSize","startSizeVariance","emissionRate","push","Particle","addOneParticle","particle","length","pop","setTextureInfo","textureWidth","textureHeight","initParticle","removeOneParticle","index","indexOf","splice","currentTime","velocityX","cos","velocityY","sin","scale","updateParticle","dt","update","_this","slice","forEach","onstopped","render","clear","draw","canvas","clearRect","alpha","rotation","halfWidth","halfHeight","save","translate","rotate","globalAlpha","drawImage","restore","circleDraw","requestAnimationFrame","now","Date","lastTime","setTimeout","circleData","onupdate","data","map","start","stop","startOnlyData","_startSize","size","_width","_height","ratio","progress","default"],"mappings":"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","file":"ParticleSystem.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","function randRange (range: number): number {\r\n  range = Math.abs(range);\r\n  return Math.random() * range * 2 - range;\r\n}\r\n\r\nclass ParticleSystem {\r\n  private texture: CanvasImageSource\r\n  private textureWidth: number\r\n  private textureHeight: number\r\n\r\n  private canvasWidth: number\r\n  private canvasHeight: number\r\n\r\n  private ctx?: CanvasRenderingContext2D\r\n\r\n  // 加速度\r\n  private gravityX: number\r\n  private gravityY: number\r\n\r\n  // 粒子发射时间间隔\r\n  private emissionRate: number\r\n\r\n  // 发射位置\r\n  private emitterX: number\r\n  private emitterY: number\r\n\r\n  // 发射位置浮动值\r\n  private emitterXVariance: number\r\n  private emitterYVariance: number\r\n\r\n  // 粒子发射速度\r\n  private speed: number\r\n\r\n  // 粒子发射角度\r\n  private angle: number\r\n  private angleVariance: number\r\n\r\n  // 旋转角度区间\r\n  private endRotation: number\r\n  private endRotationVariance: number\r\n\r\n  // 开始大小\r\n  private startSize: number\r\n  private startSizeVariance: number\r\n\r\n  // 粒子生命周期\r\n  private lifespan: number\r\n\r\n  // 最大粒子数\r\n  private maxParticles: number\r\n\r\n  // 当前粒子列表\r\n  private particleList: Array<Particle> = []\r\n\r\n  // 对象池粒子\r\n  private pool: Array<Particle> = []\r\n\r\n  // 计时器\r\n  private frameTime: number = 0\r\n\r\n  // 粒子上次重绘的时间\r\n  private lastTime: number\r\n\r\n  private $stopping: boolean = false\r\n  private $stopped: boolean = true\r\n\r\n  // 完全停止时的回调\r\n  public onstopped: () => undefined\r\n\r\n  constructor (\r\n    texture: CanvasImageSource,\r\n    textureInfo: {\r\n      width: number,\r\n      height: number\r\n    },\r\n    config: string | any,\r\n    ctx?: CanvasRenderingContext2D,\r\n    canvasInfo?: {\r\n      width: number,\r\n      height: number\r\n    }\r\n  ) {\r\n    if (canvasInfo) {\r\n      this.canvasWidth = canvasInfo.width;\r\n      this.canvasHeight = canvasInfo.height;\r\n    }\r\n    this.ctx = ctx;\r\n\r\n    this.changeTexture(texture, textureInfo);\r\n\r\n    this.changeConfig(config);\r\n\r\n    this.createParticlePool();\r\n  }\r\n\r\n  // 参数初始化\r\n  public changeConfig (config: any) {\r\n    this.gravityX = config.gravity.x;\r\n    this.gravityY = config.gravity.y;\r\n\r\n    this.emitterX = config.emitterX;\r\n    this.emitterXVariance = config.emitterXVariance;\r\n    this.emitterYVariance = config.emitterYVariance;\r\n    this.emitterY = config.emitterY;\r\n\r\n    this.lifespan = config.lifespan;\r\n    this.maxParticles = config.maxParticles;\r\n\r\n    this.speed = config.speed;\r\n\r\n    this.angle = config.angle;\r\n    this.angleVariance = config.angleVariance;\r\n\r\n    this.endRotation = config.endRotation;\r\n    this.endRotationVariance = config.endRotationVariance;\r\n\r\n    this.startSize = config.startSize;\r\n    this.startSizeVariance = config.startSizeVariance;\r\n\r\n    this.emissionRate = this.lifespan / this.maxParticles;\r\n  }\r\n\r\n  // 生成粒子\r\n  private createParticlePool () {\r\n    for (let i = 0; i < this.maxParticles; i++) {\r\n      this.pool.push(new Particle);\r\n    }\r\n  }\r\n\r\n  // 加入一个粒子\r\n  private addOneParticle () {\r\n    let particle: Particle;\r\n\r\n    if (this.pool.length) {\r\n      particle = this.pool.pop();\r\n    } else {\r\n      particle = new Particle;\r\n    }\r\n\r\n    particle.setTextureInfo(this.texture, {\r\n      width: this.textureWidth,\r\n      height: this.textureHeight\r\n    })\r\n\r\n    this.initParticle(particle);\r\n\r\n    this.particleList.push(particle);\r\n  }\r\n\r\n  // 去掉一个粒子\r\n  private removeOneParticle (particle: Particle) {\r\n    let index: number = this.particleList.indexOf(particle);\r\n\r\n    this.particleList.splice(index, 1);\r\n\r\n    particle.texture = null;\r\n\r\n    this.pool.push(particle);\r\n  }\r\n\r\n  private initParticle (particle: Particle): Particle {\r\n    particle.currentTime = 0;\r\n    particle.lifespan = this.lifespan;\r\n\r\n    particle.x = this.emitterX + randRange(this.emitterXVariance);\r\n\r\n    particle.y = this.emitterY + randRange(this.emitterYVariance);\r\n\r\n    particle.endRotation = this.endRotation + randRange(this.endRotationVariance);\r\n\r\n    let angle = this.angle + randRange(this.angleVariance);\r\n\r\n    particle.velocityX = this.speed * Math.cos(angle);\r\n\r\n    particle.velocityY = this.speed * Math.sin(angle);\r\n\r\n    particle.startSize = this.startSize + randRange(this.startSizeVariance);\r\n\r\n    if (particle.startSize < 0) {\r\n      particle.startSize = 0.01\r\n    }\r\n\r\n    particle.scale = particle.startSize / this.startSize;\r\n\r\n    return particle;\r\n  }\r\n\r\n  public updateParticle (particle: Particle, dt: number) {\r\n    dt = dt / 1000;\r\n\r\n    particle.velocityX += this.gravityX * particle.scale * dt;\r\n\r\n    particle.velocityY += this.gravityY * particle.scale * dt;\r\n    particle.x += particle.velocityX * dt;\r\n\r\n    particle.y += particle.velocityY * dt;\r\n  }\r\n\r\n  public update (dt: number) {\r\n    // 是否需要新增粒子\r\n    if (!this.$stopping) {\r\n      this.frameTime += dt;\r\n      while (this.frameTime > 0) {\r\n        if (this.particleList.length < this.maxParticles) {\r\n          this.addOneParticle()\r\n        }\r\n\r\n        this.frameTime -= this.emissionRate;\r\n      }\r\n    }\r\n\r\n    // 更新粒子状态或移除粒子\r\n    let temp: Array<Particle> = [...this.particleList];\r\n\r\n    temp.forEach((particle: Particle) => {\r\n      if (particle.currentTime < particle.lifespan) {\r\n        this.updateParticle(particle, dt);\r\n        particle.currentTime += dt;\r\n      } else {\r\n        this.removeOneParticle(particle);\r\n\r\n        if (this.$stopping && this.particleList.length === 0) {\r\n          this.$stopped = true;\r\n          this.onstopped && this.onstopped();\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  public render (dt: number, clear: boolean = false) {\r\n\r\n    this.update(dt);\r\n\r\n    if (typeof (<any>this.ctx).draw !== 'undefined') {\r\n      \r\n      if (clear) {\r\n        this.draw();\r\n        (<any>this.ctx).draw();\r\n      } else {\r\n        this.draw();\r\n        (<any>this.ctx).draw(true);\r\n      }\r\n    } else {\r\n      if (clear) {\r\n        let width: number, height: number;\r\n        if (this.canvasWidth) {\r\n          width = this.canvasWidth;\r\n          height = this.canvasHeight;\r\n        } else if (this.ctx.canvas) {\r\n          width  = this.ctx.canvas.width;\r\n          height = this.ctx.canvas.width;\r\n        }\r\n        this.ctx.clearRect(0, 0, width, height);\r\n        this.draw();\r\n      } else {\r\n        this.draw();\r\n      }\r\n    }\r\n  }\r\n\r\n  private draw () {\r\n    this.particleList.forEach((particle: Particle) => {\r\n      let {\r\n        texture,\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        alpha,\r\n        rotation\r\n      } = particle;\r\n\r\n      // 粒子旋转和透明之后画上画布\r\n      let halfWidth = width / 2,\r\n        halfHeight = height /2;\r\n\r\n      this.ctx.save();\r\n\r\n      this.ctx.translate(x + halfWidth, y + halfHeight);\r\n\r\n      this.ctx.rotate(rotation);\r\n\r\n      if (alpha !== 1) {\r\n        this.ctx.globalAlpha = alpha;\r\n        this.ctx.drawImage(texture, -halfWidth, -halfHeight, width, height);\r\n      } else {\r\n        this.ctx.drawImage(texture, -halfWidth, -halfHeight, width, height);\r\n      }\r\n\r\n      this.ctx.restore();\r\n    })\r\n  }\r\n\r\n  public changeTexture (texture: CanvasImageSource, textureInfo: {\r\n    width: number,\r\n    height: number\r\n  }) {\r\n    this.texture = texture;\r\n\r\n    this.textureWidth = textureInfo.width;\r\n    this.textureHeight = textureInfo.height;\r\n  }\r\n\r\n  // 周期性调用\r\n  private circleDraw (dt: number) {\r\n    if (this.$stopped) {\r\n      return;\r\n    }\r\n\r\n    this.render(dt, true);\r\n\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      requestAnimationFrame(() => {\r\n        let now = Date.now();\r\n        this.circleDraw(now - this.lastTime);\r\n        this.lastTime = now;\r\n      })\r\n    } else {\r\n      setTimeout(() => {\r\n        let now = Date.now();\r\n        this.circleDraw(now - this.lastTime);\r\n        this.lastTime = now;\r\n      }, 17)\r\n    }\r\n  }\r\n\r\n  // 循环更新数据\r\n  private circleData (dt: number, onupdate: ([]: Array<any>) => void) {\r\n    if (this.$stopped) {\r\n      return;\r\n    }\r\n\r\n    this.update(dt);\r\n\r\n    let data = this.particleList.map((particle: Particle) => {\r\n      let {\r\n        texture,\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        alpha,\r\n        rotation\r\n      } = particle;\r\n\r\n      return {\r\n        texture,\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        alpha,\r\n        rotation\r\n      }\r\n    })\r\n\r\n    onupdate(data);\r\n\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      requestAnimationFrame(() => {\r\n        let now = Date.now();\r\n        this.circleData(now - this.lastTime, onupdate);\r\n        this.lastTime = now;\r\n      })\r\n    } else {\r\n      setTimeout(() => {\r\n        let now = Date.now();\r\n        this.circleData(now - this.lastTime, onupdate);\r\n        this.lastTime = now;\r\n      }, 17)\r\n    }\r\n  }\r\n\r\n  public start () {\r\n    this.$stopping = false;\r\n\r\n    if (!this.$stopped) {\r\n      return;\r\n    }\r\n\r\n    this.lastTime = Date.now();\r\n\r\n    this.$stopped = false;\r\n    this.circleDraw(0);\r\n  }\r\n\r\n  public stop () {\r\n    this.$stopping = true;\r\n  }\r\n\r\n  get isStop () {\r\n    return this.$stopped;\r\n  }\r\n\r\n  // 启动仅更新数据模式\r\n  public startOnlyData (onupdate: ([]:Array<any>) => void) {\r\n    this.$stopping = false;\r\n\r\n    if (!this.$stopped) {\r\n      return;\r\n    }\r\n\r\n    this.lastTime = Date.now();\r\n\r\n    this.$stopped = false;\r\n    this.circleData(0, onupdate);\r\n  }\r\n}\r\n\r\nclass Particle {\r\n  public lifespan: number\r\n\r\n  public velocityX: number\r\n  public velocityY: number\r\n\r\n  public x: number\r\n  public y: number\r\n\r\n  public currentTime: number\r\n\r\n  private _startSize: number\r\n  public scale: number\r\n\r\n  public endRotation: number\r\n\r\n  private ratio: number\r\n\r\n  // 输入的图像宽高\r\n  private _width: number\r\n  private _height: number\r\n\r\n  public texture: CanvasImageSource\r\n\r\n  set startSize (size: number) {\r\n    this._startSize = size;\r\n\r\n    this._width = size;\r\n    this._height = size / this.ratio;\r\n  }\r\n\r\n  get startSize (): number {\r\n    return this._startSize;\r\n  }\r\n\r\n  private get progress (): number {\r\n    return this.currentTime / this.lifespan;\r\n  }\r\n\r\n  get alpha (): number {\r\n    let progress = this.progress;\r\n\r\n    if (progress > .8) {\r\n      let alpha: number = (1 - progress) / 0.2;\r\n      return alpha > 0 ? alpha : 0\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  get rotation (): number {\r\n    return this.endRotation * this.progress;\r\n  }\r\n\r\n  public setTextureInfo (texture: CanvasImageSource, config: {\r\n    width: number,\r\n    height: number\r\n  }) {\r\n    this.texture = texture;\r\n    this.ratio = config.width / config.height;\r\n  }\r\n\r\n  public get width (): number {\r\n    return this._width;\r\n  }\r\n\r\n  public get height (): number {\r\n    return this._height;\r\n  }\r\n}\r\nexport default ParticleSystem;\r\n\r\nexport {\r\n  ParticleSystem\r\n}\r\n"],"sourceRoot":""}